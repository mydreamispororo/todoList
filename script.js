// Todo List Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò
class TodoApp {
    constructor() {
        this.todos = [];
        this.isDarkMode = false;
        this.editingId = null;
        this.autoBackupEnabled = false;
        this.autoBackupInterval = null;
        this._storageData = null;
        
        this.init();
    }

    init() {
        this.loadFromStorage();
        this.bindEvents();
        this.updateUI();
    }

    // Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
    bindEvents() {
        // Ìï† Ïùº Ï∂îÍ∞Ä Ìèº
        document.getElementById('add-todo-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.addTodo();
        });

        // ÌÖåÎßà ÌÜ†Í∏Ä
        document.getElementById('theme-toggle').addEventListener('click', () => {
            this.toggleTheme();
        });

        // Ìï† Ïùº Î™©Î°ù ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ (Ïù¥Î≤§Ìä∏ ÏúÑÏûÑ)
        document.getElementById('todo-list').addEventListener('click', (e) => {
            this.handleTodoClick(e);
        });

        // Ìï† Ïùº Î™©Î°ù ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ (EnterÎ°ú Ï†ÄÏû•)
        document.getElementById('todo-list').addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey && (e.target.classList.contains('editing'))) {
                e.preventDefault();
                const todoItem = e.target.closest('.todo-item');
                if (todoItem) {
                    this.saveEdit(todoItem.dataset.id);
                }
            }
        });

        // Î∞±ÏóÖ/Î≥µÏõê Í∏∞Îä•
        document.getElementById('export-btn').addEventListener('click', () => {
            this.exportData();
        });

        document.getElementById('import-btn').addEventListener('click', () => {
            document.getElementById('file-input').click();
        });

        document.getElementById('file-input').addEventListener('change', (e) => {
            this.importData(e);
        });

        // ÏûêÎèô Î∞±ÏóÖ ÌÜ†Í∏Ä
        document.getElementById('auto-backup-btn').addEventListener('click', () => {
            this.toggleAutoBackup();
        });
    }

    // Ìï† Ïùº Ï∂îÍ∞Ä
    addTodo() {
        const textInput = document.getElementById('todo-input');
        const memoInput = document.getElementById('memo-input');
        const timeInput = document.getElementById('time-input');
        
        const text = textInput.value.trim();
        const memo = memoInput.value.trim();
        const time = timeInput.value;
        
        if (text) {
            const todo = {
                id: Date.now().toString(),
                text: text,
                memo: memo,
                time: time,
                completed: false,
                createdAt: new Date().toISOString()
            };
            
            this.todos.unshift(todo); // ÏµúÏã† Ìï≠Î™©ÏùÑ Îß® ÏúÑÏóê
            textInput.value = '';
            memoInput.value = '';
            timeInput.value = '';
            this.saveToStorage();
            this.updateUI();

            // ÏûêÎèô Î∞±ÏóÖÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∞±ÏóÖ ÏàòÌñâ
            if (this.autoBackupEnabled) {
                this.performAutoBackup();
            }
        }
    }

    // Ìï† Ïùº ÌÜ†Í∏Ä (ÏôÑÎ£å/ÎØ∏ÏôÑÎ£å)
    toggleTodo(id) {
        const todo = this.todos.find(t => t.id === id);
        if (todo) {
            todo.completed = !todo.completed;
            this.saveToStorage();
            this.updateUI();

            // ÏûêÎèô Î∞±ÏóÖÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∞±ÏóÖ ÏàòÌñâ
            if (this.autoBackupEnabled) {
                this.performAutoBackup();
            }
        }
    }

    // Ìï† Ïùº ÏÇ≠Ï†ú
    deleteTodo(id) {
        if (confirm('Ï†ïÎßêÎ°ú Ïù¥ Ìï† ÏùºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            this.todos = this.todos.filter(t => t.id !== id);
            this.saveToStorage();
            this.updateUI();

            // ÏûêÎèô Î∞±ÏóÖÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∞±ÏóÖ ÏàòÌñâ
            if (this.autoBackupEnabled) {
                this.performAutoBackup();
            }
        }
    }

    // Ìï† Ïùº ÏàòÏ†ï ÏãúÏûë
    startEdit(id) {
        this.editingId = id;
        this.updateUI();
        
        // ÏàòÏ†ï Î™®ÎìúÍ∞Ä Îêú ÌõÑ Ï≤´ Î≤àÏß∏ ÏûÖÎ†• ÌïÑÎìúÏóê Ìè¨Ïª§Ïä§
        setTimeout(() => {
            const todoItem = document.querySelector(`[data-id="${id}"]`);
            if (todoItem) {
                const textInput = todoItem.querySelector('.todo-text.editing');
                if (textInput) {
                    textInput.focus();
                }
            }
        }, 0);
    }

    // Ìï† Ïùº ÏàòÏ†ï ÏôÑÎ£å
    saveEdit(id) {
        const todoItem = document.querySelector(`[data-id="${id}"]`);
        if (!todoItem) return;

        const textInput = todoItem.querySelector('.todo-text');
        const memoInput = todoItem.querySelector('.todo-memo');
        const timeInput = todoItem.querySelector('.todo-time.editing');

        const newText = textInput.textContent.trim() || textInput.value.trim();
        const newMemo = memoInput ? (memoInput.textContent.trim() || memoInput.value.trim()) : '';
        const newTime = timeInput ? timeInput.value : '';

        const todo = this.todos.find(t => t.id === id);
        if (todo && newText) {
            todo.text = newText;
            todo.memo = newMemo;
            todo.time = newTime;
            this.editingId = null;
            this.saveToStorage();
            this.updateUI();

            // ÏûêÎèô Î∞±ÏóÖÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∞±ÏóÖ ÏàòÌñâ
            if (this.autoBackupEnabled) {
                this.performAutoBackup();
            }
        }
    }

    // Ìï† Ïùº ÏàòÏ†ï Ï∑®ÏÜå
    cancelEdit() {
        this.editingId = null;
        this.updateUI();
    }

    // Ìï† Ïùº Î™©Î°ù ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
    handleTodoClick(e) {
        const todoItem = e.target.closest('.todo-item');
        if (!todoItem) return;

        const id = todoItem.dataset.id;
        const action = e.target.dataset.action;

        switch (action) {
            case 'toggle':
                this.toggleTodo(id);
                break;
            case 'edit':
                this.startEdit(id);
                break;
            case 'delete':
                this.deleteTodo(id);
                break;
            case 'save':
                this.saveEdit(id);
                break;
            case 'cancel':
                this.cancelEdit();
                break;
        }
    }

    // ÌÖåÎßà ÌÜ†Í∏Ä
    toggleTheme() {
        this.isDarkMode = !this.isDarkMode;
        document.body.classList.toggle('dark', this.isDarkMode);
        
        const themeIcon = document.querySelector('.theme-icon');
        themeIcon.textContent = this.isDarkMode ? '‚òÄÔ∏è' : 'üåô';
        
        this.saveToStorage();
    }

    // UI ÏóÖÎç∞Ïù¥Ìä∏
    updateUI() {
        this.renderTodoList();
        this.updateStats();
        this.toggleEmptyState();
    }

    // Ìï† Ïùº Î™©Î°ù Î†åÎçîÎßÅ
    renderTodoList() {
        const todoList = document.getElementById('todo-list');
        const emptyState = document.getElementById('empty-state');
        
        if (!todoList) return;
        
        if (this.todos.length === 0) {
            todoList.innerHTML = '';
            if (emptyState) {
                todoList.appendChild(emptyState);
            }
            return;
        }

        const todoItems = this.todos.map(todo => this.createTodoItem(todo)).join('');
        todoList.innerHTML = todoItems;
    }

    // ÏãúÍ∞ÑÏùÑ ÌïúÍµ≠Ïñ¥ ÌòïÏãùÏúºÎ°ú Ìè¨Îß∑ÌåÖ
    formatTime(time) {
        if (!time) return '';
        const [hours, minutes] = time.split(':');
        const hour = parseInt(hours);
        const ampm = hour >= 12 ? 'Ïò§ÌõÑ' : 'Ïò§Ï†Ñ';
        const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
        return `${ampm} ${displayHour}:${minutes}`;
    }

    // Ìï† Ïùº ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
    createTodoItem(todo) {
        const isEditing = this.editingId === todo.id;
        
        return `
            <div class="todo-item ${todo.completed ? 'completed' : ''}" data-id="${todo.id}">
                <div class="todo-main">
                    <input 
                        type="checkbox" 
                        class="todo-checkbox" 
                        ${todo.completed ? 'checked' : ''}
                        data-action="toggle"
                    >
                    <div class="todo-content">
                        ${isEditing ? `
                            <div class="todo-text editing" contenteditable="true">${todo.text}</div>
                        ` : `
                            <div class="todo-text">${todo.text}</div>
                        `}
                        
                        ${todo.memo || isEditing ? `
                            ${isEditing ? `
                                <textarea class="todo-memo editing" placeholder="Î©îÎ™®...">${todo.memo}</textarea>
                            ` : `
                                <div class="todo-memo">${todo.memo}</div>
                            `}
                        ` : ''}
                        
                        ${todo.time || isEditing ? `
                            <div style="margin-top: 0.5rem;">
                                ${isEditing ? `
                                    <input type="time" class="todo-time editing" value="${todo.time}">
                                ` : `
                                    <span class="todo-time">‚è∞ ${this.formatTime(todo.time)}</span>
                                `}
                            </div>
                        ` : ''}
                    </div>
                    <div class="todo-actions">
                        ${isEditing ? `
                            <button class="todo-button save-button" data-action="save">Ï†ÄÏû•</button>
                            <button class="todo-button cancel-button" data-action="cancel">Ï∑®ÏÜå</button>
                        ` : `
                            <button class="todo-button edit-button" data-action="edit">ÏàòÏ†ï</button>
                            <button class="todo-button delete-button" data-action="delete">ÏÇ≠Ï†ú</button>
                        `}
                    </div>
                </div>
            </div>
        `;
    }

    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    updateStats() {
        const totalCount = this.todos.length;
        const completedCount = this.todos.filter(todo => todo.completed).length;
        const pendingCount = totalCount - completedCount;

        const totalElement = document.getElementById('total-count');
        const completedElement = document.getElementById('completed-count');
        const pendingElement = document.getElementById('pending-count');

        if (totalElement) totalElement.textContent = totalCount;
        if (completedElement) completedElement.textContent = completedCount;
        if (pendingElement) pendingElement.textContent = pendingCount;
    }

    // Îπà ÏÉÅÌÉú ÌÜ†Í∏Ä
    toggleEmptyState() {
        const emptyState = document.getElementById('empty-state');
        
        if (emptyState) {
            if (this.todos.length === 0) {
                emptyState.style.display = 'block';
            } else {
                emptyState.style.display = 'none';
            }
        }
    }

    // Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (JSON ÌååÏùºÎ°ú Îã§Ïö¥Î°úÎìú)
    exportData() {
        try {
            const data = {
                todos: this.todos,
                isDarkMode: this.isDarkMode,
                autoBackupEnabled: this.autoBackupEnabled,
                exportDate: new Date().toISOString(),
                version: '1.0'
            };

            const jsonString = JSON.stringify(data, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `todo-backup-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            this.showNotification('Îç∞Ïù¥ÌÑ∞Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÎÇ¥Î≥¥ÎÉàÏäµÎãàÎã§!', 'success');
        } catch (error) {
            console.error('Export error:', error);
            this.showNotification('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
        }
    }

    // Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (JSON ÌååÏùºÏóêÏÑú Î≥µÏõê)
    importData(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const content = e.target.result;
                console.log('File content:', content); // ÎîîÎ≤ÑÍπÖÏö©
                
                const data = JSON.parse(content);
                
                // Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
                if (!data || typeof data !== 'object') {
                    throw new Error('Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§.');
                }
                
                if (!data.todos || !Array.isArray(data.todos)) {
                    throw new Error('Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Ìï† Ïùº Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏûÖÎãàÎã§.');
                }

                // Í∞Å Ìï† Ïùº Ìï≠Î™© Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
                for (let todo of data.todos) {
                    if (!todo.id || !todo.text) {
                        throw new Error('ÏùºÎ∂Ä Ìï† Ïùº Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÜêÏÉÅÎêòÏóàÏäµÎãàÎã§.');
                    }
                    // ÎàÑÎùΩÎêú ÌïÑÎìú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
                    if (todo.memo === undefined) todo.memo = '';
                    if (todo.time === undefined) todo.time = '';
                    if (todo.completed === undefined) todo.completed = false;
                    if (!todo.createdAt) todo.createdAt = new Date().toISOString();
                }

                // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ÏôÄ Î≥ëÌï©Ìï†ÏßÄ ÌôïÏù∏
                const shouldMerge = this.todos.length > 0 && 
                    confirm('Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏäµÎãàÎã§. ÏÉà Îç∞Ïù¥ÌÑ∞ÏôÄ Î≥ëÌï©ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n(Ï∑®ÏÜåÌïòÎ©¥ Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î•º ÎçÆÏñ¥ÏîÅÎãàÎã§)');

                if (shouldMerge) {
                    // Ï§ëÎ≥µ Ï†úÍ±∞ÌïòÏó¨ Î≥ëÌï©
                    const existingIds = new Set(this.todos.map(todo => todo.id));
                    const newTodos = data.todos.filter(todo => !existingIds.has(todo.id));
                    this.todos = [...this.todos, ...newTodos];
                    this.showNotification(`${newTodos.length}Í∞úÏùò ÏÉàÎ°úÏö¥ Ìï† ÏùºÏùÑ Ï∂îÍ∞ÄÌñàÏäµÎãàÎã§!`, 'success');
                } else {
                    this.todos = data.todos;
                    this.showNotification(`${data.todos.length}Í∞úÏùò Ìï† ÏùºÏùÑ Î∂àÎü¨ÏôîÏäµÎãàÎã§!`, 'success');
                }

                // ÌÖåÎßà ÏÑ§Ï†ïÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
                if (data.isDarkMode !== undefined) {
                    this.isDarkMode = data.isDarkMode;
                    document.body.classList.toggle('dark', this.isDarkMode);
                    const themeIcon = document.querySelector('.theme-icon');
                    themeIcon.textContent = this.isDarkMode ? '‚òÄÔ∏è' : 'üåô';
                }

                // ÏûêÎèô Î∞±ÏóÖ ÏÑ§Ï†ïÎèÑ Í∞ÄÏ†∏Ïò§Í∏∞ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
                if (data.autoBackupEnabled !== undefined) {
                    this.autoBackupEnabled = data.autoBackupEnabled;
                    this.updateAutoBackupUI();
                }

                this.saveToStorage();
                this.updateUI();
                
            } catch (error) {
                console.error('Import error:', error);
                this.showNotification('ÌååÏùºÏùÑ ÏùΩÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message, 'error');
            }
        };
        
        reader.onerror = () => {
            this.showNotification('ÌååÏùºÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
        };
        
        reader.readAsText(file, 'UTF-8');
        
        // ÌååÏùº ÏûÖÎ†• Ï¥àÍ∏∞Ìôî
        event.target.value = '';
    }

    // ÏûêÎèô Î∞±ÏóÖ ÌÜ†Í∏Ä
    toggleAutoBackup() {
        this.autoBackupEnabled = !this.autoBackupEnabled;
        this.updateAutoBackupUI();
        this.saveToStorage();
    }

    // ÏûêÎèô Î∞±ÏóÖ UI ÏóÖÎç∞Ïù¥Ìä∏
    updateAutoBackupUI() {
        const button = document.getElementById('auto-backup-btn');
        const status = document.getElementById('auto-backup-status');
        
        if (this.autoBackupEnabled) {
            button.classList.add('active');
            status.textContent = 'ON';
            this.showNotification('ÏûêÎèô Î∞±ÏóÖÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§. Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Ïãú ÏûêÎèôÏúºÎ°ú Îã§Ïö¥Î°úÎìúÎê©ÎãàÎã§.', 'success');
        } else {
            button.classList.remove('active');
            status.textContent = 'OFF';
            this.showNotification('ÏûêÎèô Î∞±ÏóÖÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.', 'info');
        }
    }

    // ÏûêÎèô Î∞±ÏóÖ Ïã§Ìñâ
    performAutoBackup() {
        if (!this.autoBackupEnabled || this.todos.length === 0) return;
        
        try {
            const data = {
                todos: this.todos,
                isDarkMode: this.isDarkMode,
                autoBackupEnabled: this.autoBackupEnabled,
                exportDate: new Date().toISOString(),
                version: '1.0',
                autoBackup: true
            };

            const jsonString = JSON.stringify(data, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
            a.download = `todo-auto-backup-${timestamp}.json`;
            a.style.display = 'none';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Auto backup error:', error);
        }
    }

    // ÏïåÎ¶º ÌëúÏãú
    showNotification(message, type = 'info') {
        // Í∏∞Ï°¥ ÏïåÎ¶ºÏù¥ ÏûàÏúºÎ©¥ Ï†úÍ±∞
        const existing = document.querySelector('.notification');
        if (existing) {
            existing.remove();
        }

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        // Ïä§ÌÉÄÏùº Ï†ÅÏö©
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 20px',
            borderRadius: '8px',
            color: 'white',
            fontSize: '14px',
            fontWeight: '500',
            zIndex: '1000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease',
            backgroundColor: type === 'success' ? '#38a169' : type === 'error' ? '#e53e3e' : '#4a5568',
            maxWidth: '300px',
            wordWrap: 'break-word'
        });

        document.body.appendChild(notification);
        
        // Ïï†ÎãàÎ©îÏù¥ÏÖòÏúºÎ°ú ÎÇòÌÉÄÎÇòÍ∏∞
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 10);
        
        // 3Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 3000);
    }

    // Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
    saveToStorage() {
        const data = {
            todos: this.todos,
            isDarkMode: this.isDarkMode,
            autoBackupEnabled: this.autoBackupEnabled
        };
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÍ∞Ä ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÌôòÍ≤ΩÏùÑ ÏúÑÌï¥ Î©îÎ™®Î¶¨Ïóê Ï†ÄÏû•
        this._storageData = data;
    }

    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Î°úÎìú
    loadFromStorage() {
        // Î©îÎ™®Î¶¨ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú (Î∏åÎùºÏö∞Ï†Ä Ïä§ÌÜ†Î¶¨ÏßÄ ÎØ∏ÏßÄÏõê ÌôòÍ≤Ω ÎåÄÏùë)
        if (this._storageData) {
            this.todos = this._storageData.todos || [];
            this.isDarkMode = this._storageData.isDarkMode || false;
            this.autoBackupEnabled = this._storageData.autoBackupEnabled || false;
        } else {
            this.todos = [];
            this.isDarkMode = false;
            this.autoBackupEnabled = false;
        }
        
        document.body.classList.toggle('dark', this.isDarkMode);
        
        const themeIcon = document.querySelector('.theme-icon');
        if (themeIcon) {
            themeIcon.textContent = this.isDarkMode ? '‚òÄÔ∏è' : 'üåô';
        }
        
        // ÏûêÎèô Î∞±ÏóÖ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setTimeout(() => {
            this.updateAutoBackupUI();
        }, 0);
    }
}

// Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
    new TodoApp();
});